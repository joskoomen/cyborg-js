{"version":3,"file":"cyborg-js.es5.js","sources":["../src/constants/EventNames.ts","../src/notifications/Notification.ts","../src/notifications/NotificationBody.ts","../src/notifications/NotificationController.ts","../src/core/MotherBoard.ts","../src/functions/walkDom.ts","../src/functions/cyborgEval.ts","../src/core/Component.ts","../src/cyborg-js.ts"],"sourcesContent":["export enum EventNames {\n  DOCUMENT_READY= 'DOMContentLoaded',\n  NODE_REMOVED= 'DOMNodeRemovedFromDocument'\n};\n","import { ICanHandleNotifications } from \"../interfaces/ICanHandleNotifications\";\n\nexport class Notification {\n    readonly name: string;\n    readonly target: ICanHandleNotifications;\n    readonly handler: Function;\n\n    constructor(pTarget: ICanHandleNotifications, pName: string, pHandler: Function) {\n        this.name = pName;\n        this.handler = pHandler;\n        this.target = pTarget;\n    }\n}","export class NotificationBody {\n    notification: string;\n    payload: Record<string, any>;\n\n    constructor(pType: string, pPayload?: Record<string, any>) {\n        this.notification = pType;\n        this.payload = pPayload || {};\n    }\n}","import { Notification } from \"./Notification\";\nimport { NotificationBody } from \"./NotificationBody\";\nimport { IAmComponent } from \"../interfaces/IAmComponent\";\nimport { ICanHandleNotifications } from \"../interfaces/ICanHandleNotifications\";\n\nexport class NotificationController {\n    static _instance: NotificationController;\n\n    private _listeners: Array<Notification>;\n\n    constructor() {\n        if (NotificationController._instance) {\n            throw new Error('Use NotificationController.getInstance()');\n        }\n        NotificationController._instance = this;\n        this._listeners = [];\n    }\n\n    static getInstance(): NotificationController {\n        if (NotificationController._instance) {\n            return NotificationController._instance;\n        }\n        return new NotificationController();\n    }\n\n    /**\n     * emit a notification\n     * @param pType\n     * @param pParams\n     */\n    notify(pType: string, pParams?: Record<string, any>): void {\n        const listeners: ReadonlyArray<Notification> = this._listeners;\n        const notes: ReadonlyArray<Notification> = listeners.filter((listener: Notification) => {\n            return listener.name === pType;\n        });\n\n        notes.forEach((note: Notification) => {\n            const body: NotificationBody = new NotificationBody(pType, pParams || {});\n            note.handler(body);\n        });\n    }\n\n    /**\n     * Add a Notification Listener\n     * @param pTarget\n     * @param pType\n     * @param pHandler\n     */\n    addNotificationListener(pTarget: ICanHandleNotifications, pType: string, pHandler: Function): void {\n        const note: Notification = new Notification(pTarget, pType, pHandler.bind(pTarget));\n        this._listeners.push(note);\n    }\n\n    /**\n     * Remove a given listener. This only removes one record.\n     * @param pType string Notification name\n     * @param pTarget Component object\n     */\n    removeNotificationListener(pType: string, pTarget: any): void {\n        const listeners: Array<Notification> = this._listeners;\n        const index: number = listeners.findIndex((notification: Notification): boolean => {\n            return (notification.name === pType) && (notification.target === pTarget);\n        });\n        this._listeners = listeners.splice(index, 1);\n    }\n\n    removeAllListenersFor(pInstance: IAmComponent): void {\n        const listeners: Array<Notification> = this._listeners;\n        this._listeners = listeners.filter((notification: Notification): boolean => {\n            return (notification.target.name !== pInstance.name);\n        });\n    }\n\n    get listeners(): Array<Notification> {\n        return this._listeners;\n    }\n}","import { NotificationRegistration } from '../notifications/NotificationRegistration';\nimport { EventNames } from '../constants/EventNames';\nimport { NotificationController } from '../notifications/NotificationController';\nimport { IAmComponent } from '../interfaces/IAmComponent';\nimport type { ComponentMap } from './ComponentMap';\nimport { ICanHandleNotifications } from '../interfaces/ICanHandleNotifications';\n\ndeclare interface ComponentConstructor {\n  new (): IAmComponent;\n}\n\ndeclare const componentsMapping: Map<string, ComponentConstructor>;\n\nexport class MotherBoard {\n  static _instance: MotherBoard;\n\n  public componentsMap: Array<ComponentMap> = [];\n  private _components: Array<IAmComponent> = [];\n  private _data: Record<string, any> = {};\n\n  constructor() {\n    if (MotherBoard._instance) {\n      throw new Error('Use MotherBoard.getInstance()');\n    }\n    MotherBoard._instance = this;\n    this.init();\n  }\n\n  static getInstance(): MotherBoard {\n    if (MotherBoard._instance) {\n      return MotherBoard._instance;\n    }\n    return new MotherBoard();\n  }\n\n  /**\n   * Init Application.\n   */\n  init(): void {\n    window.onload = (): void => {\n      this.onload();\n    };\n\n    window.onunload = (): void => {\n      this.onunload();\n    };\n\n    window.onpagehide = (): void => {\n      this.destroy();\n    };\n\n    document.addEventListener(\n      EventNames.DOCUMENT_READY,\n      (): void => {\n        this.bind();\n      },\n      false\n    );\n  }\n\n  /**\n   * Document ready handler\n   */\n  bind(): void {\n    const html: HTMLHtmlElement | null = document.querySelector('html');\n    if (!html) {\n      throw Error('No html tag available');\n    }\n\n    html.classList.remove('no-js');\n    html.classList.add('js');\n    this.build(html);\n  }\n\n  build(pEl: HTMLElement): void {\n    const componentsList: Array<HTMLElement> = Array.from(\n      pEl.querySelectorAll('[data-component]')\n    );\n    if (componentsList.length > 0) {\n      componentsList.forEach((el: HTMLElement) => {\n        const dataset: DOMStringMap = el.dataset;\n        if (dataset && dataset.component) {\n          const componentsArray: Array<string> = dataset.component\n            .replace(' ', '')\n            .split(',');\n          componentsArray.forEach((componentString: string) => {\n            const ComponentClass: ComponentMap | null = MotherBoard.getComponentMapByName(\n              this.componentsMap,\n              componentString\n            );\n            if (ComponentClass) {\n              const component: IAmComponent = new ComponentClass.class();\n              console.log('component', component);\n              if (\n                component.notifications &&\n                component.notifications.length > 0\n              ) {\n                this.registerNotification({\n                  name: componentString,\n                  notifications: component.notifications,\n                  classRef: component,\n                });\n              }\n\n              component.bind(el);\n              this._components.push(component);\n              this.destroyComponentListener(component, el);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Window onload handler\n   */\n  onload(): void {\n    this._components.forEach((pComponent: IAmComponent) => {\n      pComponent.onload();\n    });\n  }\n\n  onunload(): void {\n    this._components.forEach((pComponent: IAmComponent) => {\n      pComponent.onunload();\n    });\n  }\n\n  destroyComponentListener(pComponent: IAmComponent, pEl: HTMLElement): void {\n    let component: IAmComponent | null = pComponent;\n    let el: HTMLElement | null = pEl;\n    if (el) {\n      if (window.MutationObserver) {\n        let observer: MutationObserver | null = new MutationObserver(\n          (mutations: Array<MutationRecord>) => {\n            mutations.forEach((mutation: MutationRecord) => {\n              mutation.removedNodes.forEach((removedNode: Node) => {\n                if (component && removedNode === pEl) {\n                  component.destroy();\n                  if (observer) {\n                    observer.disconnect();\n                    observer = null;\n                  }\n                  component = null;\n                  el = null;\n                }\n              });\n            });\n          }\n        );\n        observer.observe(document, {\n          childList: true,\n          subtree: true,\n        });\n      } else {\n        pComponent.addEventListener(EventNames.NODE_REMOVED, function() {\n          pComponent.destroy();\n          component = null;\n          el = null;\n        });\n      }\n    }\n  }\n\n  registerNotification(pObject: NotificationRegistration): void {\n    if (pObject.notifications) {\n      const notifications: ReadonlyArray<string> = pObject.notifications;\n      const classRef: ICanHandleNotifications = pObject.classRef;\n      notifications.forEach((pNotification: string) => {\n        \n        this.notifier.addNotificationListener(\n          classRef,\n          pNotification,\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          classRef.handleNotifications\n        );\n      });\n    }\n  }\n\n  /**\n   * Get NotificationController access.\n   * @returns {NotificationController}\n   */\n  get notifier(): NotificationController {\n    return NotificationController.getInstance();\n  }\n\n  get data(): Record<string, any> {\n    return this._data;\n  }\n\n  get components(): ReadonlyArray<IAmComponent> {\n    return this._components;\n  }\n\n  /**\n   */\n  static getComponentMapByName(\n    pArray: Array<ComponentMap>,\n    pName: string\n  ): ComponentMap | null {\n    if (pArray && (pArray.length > 0)) {\n      let component: ComponentMap | null = pArray.find((pRec:ComponentMap) => pRec.reference === pName) || null;\n      return component;\n    }\n    return null;\n  }\n\n  /**\n   * destroy application\n   */\n  destroy(): void {\n    while (this._components.length > 0) {\n      const component: IAmComponent = this._components[0];\n      if (component && component.el) {\n        component.el.remove();\n      }\n      this._components.shift();\n    }\n  }\n}","export function walkDom(pEl: Element | null, pCallback: Function): void{\n    if (pEl) {\n        pCallback(pEl);\n        pEl = pEl.firstElementChild;\n\n        while (pEl) {\n            walkDom(pEl, pCallback);\n            pEl = pEl.nextElementSibling;\n        }\n        \n    }\n}","export function cyborgEval(\n  pExpression: any,\n  pDataContext: any,\n  pAdditionalHelperVariables?: Record<string, any>\n): void {\n  const additionalHelperVariables: any = pAdditionalHelperVariables || {};\n  if (typeof pExpression === 'function') {\n    return pExpression.call(pDataContext);\n  }\n\n  return new Function(\n    ...Object.keys(additionalHelperVariables),\n    `var __cyborg_result; with($data) { __cyborg_result = ${pExpression} }; return __cyborg_result`\n  )(pDataContext, ...Object.values(additionalHelperVariables));\n}","import { MotherBoard } from './MotherBoard';\nimport { EventObject } from '../events/EventObject';\nimport { walkDom } from '../functions/walkDom';\nimport { cyborgEval } from '../functions/cyborgEval';\nimport { NotificationBody } from '../notifications/NotificationBody';\nimport { IAmComponent } from '../interfaces/IAmComponent';\n\nexport class Component implements IAmComponent{\n  \n  private _el: HTMLElement | undefined;\n  private _name = '';\n  private _events: Array<EventObject>;\n  private _motherboard: MotherBoard;\n  private _addEventListener: Function;\n  private _removeEventListener: Function;\n\n  protected _notifications: ReadonlyArray<string> = [];\n\n  constructor() {\n    this._motherboard = MotherBoard.getInstance();\n    this._events = [];\n\n    this._addEventListener = (pTarget: HTMLElement,pEventName: string,pHandler: Function): Function => {\n      const handler: Function = pHandler.bind(this);\n      this._events.push({\n        target: pTarget,\n        name: pEventName,\n        handler: handler,\n      });\n      return handler;\n    };\n\n    this._removeEventListener = (pTarget: HTMLElement,pEventName: string,\n      pHandler: Function\n    ): HTMLElement => {\n      const index: number = this._events.findIndex(\n        (evtObj: EventObject) => {\n          return (\n            evtObj.name === pEventName &&\n            evtObj.handler === pHandler\n          );\n        }\n      );\n      this._events.splice(index, 1);\n      return pTarget;\n    };\n  }\n\n  /**\n  * Bind your component in the system.\n  * @param {HTMLElement} pEl Connected Node\n  */\n  bind(pEl: HTMLElement): void {\n    this._el = pEl;\n    this._name = pEl.dataset.component || '';\n    this.registerInlineListeners();\n  }\n\n  onload(): void {\n    // window.onload trigger for component.\n  }\n\n  onunload(): void {\n    // window.onunload trigger for component.\n  }\n\n  addListener(pType: string): void {\n    this.motherboard.notifier.addNotificationListener(\n      this,\n      pType,\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      this.handleNotifications\n    );\n  }\n\n  removeListener(pType: string): void {\n    this.motherboard.notifier.removeNotificationListener(\n      pType,\n      this\n    );\n  }\n\n  notify(pType: string, pParams: Record<string, any> = {}): void {\n    this.motherboard.notifier.notify(pType, pParams);\n  }\n\n  handleNotifications(pObject: NotificationBody): void {\n    pObject.notification;\n  }\n\n  registerInlineListeners(): void {\n    if (this._el) {\n      walkDom(this._el, (element: HTMLElement) => {\n        if (element.dataset.component) {\n          return;\n        }\n        Array.from(element.attributes).forEach(\n          (pAttribute: Attr) => {\n            if (!pAttribute.name.startsWith('on')) return;\n            const event: string = pAttribute.name.replace('data-on:','');\n            \n            element.dataset[pAttribute.name] = pAttribute.value;\n            element.removeAttribute(pAttribute.name);\n            \n            const isFunction: boolean = pAttribute.value.includes('(') && pAttribute.value.includes(')');\n\n            if (isFunction) {\n              const handler: Function = this._addEventListener(element, event, new Function(`this.${pAttribute.value}`).bind(this));\n              element.addEventListener(event, handler as EventListener);\n            } else {\n              const handler: Function = this._addEventListener(element, event, () => {\n                  cyborgEval(\n                    this._motherboard.data,\n                    pAttribute.value\n                  );\n                }\n              );\n              element.addEventListener(event,handler as EventListener);\n            }\n          }\n        );\n      });\n    }\n  }\n\n  addEventListener(pEventName: string,pHandler: EventListenerOrEventListenerObject): void {\n    if (this._el) {\n      const handler: Function = this._addEventListener(\n        this._el,\n        pEventName,\n        pHandler\n      );\n      this._el.addEventListener(\n        pEventName,\n        handler as EventListenerOrEventListenerObject,\n        false\n      );\n    }\n}\n\n  removeEventListener(pEventName: string,pHandler: EventListenerOrEventListenerObject): void {\n    if (this._el) {\n      this._removeEventListener(this._el, pEventName, pHandler);\n      this._el.removeEventListener(pEventName, pHandler);\n    }\n  }\n\n  /**\n  * @param {Object} pData Data object to use\n  * @param {function} pTemplate template function\n  */\n  render(\n    pData: Record<string, any>,\n    pTemplate?: Function\n  ): void {\n    if (this._el) {\n      if (this._el.children) {\n        while (this._el.children.length > 0) {\n          this._el.children[0].remove();\n        }\n      }\n\n      if (pTemplate) {\n        this._el.innerHTML = pTemplate(pData);\n      } else {\n        this._el.innerHTML = this.getTemplate(pData);\n      }\n      this.motherboard.build(this._el);\n    }\n  }\n\n  /**\n  * @param {Object} pData\n  * @returns {string}\n  */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getTemplate(pData?: Record<string, any>): string {\n    pData = pData || {};\n    return '';\n  }\n\n  get notifications(): ReadonlyArray<string>  {\n    return this._notifications; \n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get el(): HTMLElement | undefined {\n    return this._el;\n  }\n\n  get motherboard(): MotherBoard {\n    return this._motherboard;\n  }\n\n  get events(): ReadonlyArray<Record<string, any>> {\n    return this._events;\n  }\n\n  /**\n  * Garbage collection ;)\n  */\n  destroy(): void {\n    this.motherboard.notifier.removeAllListenersFor(this);\n    while (this._events.length > 0) {\n      const event: EventObject = this._events[0];\n      this._removeEventListener(\n        event.target,\n        event.name,\n        event.handler\n      );\n      event.target.removeEventListener(\n        event.name,\n        event.handler as EventListenerOrEventListenerObject\n      );\n    }\n    if (this._el) {\n      this._el.remove();\n      this._el = undefined;\n    }\n  }\n}","import { MotherBoard } from './core/MotherBoard';\nimport { Component } from './core/Component';\nimport { Notification } from './notifications/Notification';\nimport { NotificationBody } from './notifications/NotificationBody';\n\nconst CyborgJS : any = { MotherBoard, Component, Notification, NotificationBody };\nexport default CyborgJS;\n"],"names":[],"mappings":"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"}